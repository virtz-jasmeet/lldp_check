#!/usr/bin/env bash
## Source: io.ctlsdn.host.11-lldp/templates/lldpOvs.j2

[[ -z "${1}" ]] && { printf "Usage: %s <physical interface>\n" "${0}"; };

#TODO:// update to support ovs changes for vlan filtering
exit 0;

MGMT_DEVS="${1}"
MGMT_BRIDGE='br-mgmt'
MGMT_PATCH='p_mgmt2lldp'

#LLDP_PORT="lldp.${MGMT_PHY_INT}"
LLDP_BRIDGE='br-lldp'
LLDP_PATCH='p_lldp2mgmt'

OVS_VSCTL="$(which ovs-vsctl)"
OVS_OFCTL="$(which ovs-ofctl)"
LLDPTOOL="$(which lldptool)"
#LLDP_TLVS=(sysName portDesc sysDesc sysCap mngAddr)
LLDP_TLVS=(sysName portDesc sysDesc sysCap mngAddr)

LLDP_NCB_MACADDR='01:80:c2:00:00:00'
LLDP_NB_MACADDR='01:80:c2:00:00:0e'
LLDP_ETHER_TYPE='0x88cc'

function main {
  [[ -z "${MGMT_DEVS}" ]] && \
    MGMT_DEVS=$(_get_mgmt_interfaces ${MGMT_BRIDGE})

  for MGMT_PHY_INT in ${MGMT_DEVS}; do
    LLDP_PORT="lldp.${MGMT_PHY_INT}"

    _create_ovs_bridge "${LLDP_BRIDGE}"
    _create_ovs_port "${LLDP_BRIDGE}" "${LLDP_PORT}" "vlan_mode=native-untagged"
    _set_ovs_attr interface "${LLDP_PORT}" "type=internal"
    _set_link_up "${LLDP_PORT}"

    _create_ovs_port "${LLDP_BRIDGE}" "${LLDP_PATCH}"
    _set_ovs_attr interface "${LLDP_PATCH}" "type=patch"
    _set_ovs_attr interface "${LLDP_PATCH}" "options:peer=${MGMT_PATCH}"

    _create_ovs_port "${MGMT_BRIDGE}" "${MGMT_PATCH}"
    _set_ovs_attr interface "${MGMT_PATCH}" "type=patch"
    _set_ovs_attr interface "${MGMT_PATCH}" "options:peer=${LLDP_PATCH}"

    MGMT_PHY_PORTNUM="$(_get_ovs_attr interface "${MGMT_PHY_INT}" ofport)"
    MGMT_PATCH_PORTNUM="$(_get_ovs_attr interface "${MGMT_PATCH}" ofport)"
    LLDP_PORT_PORTNUM="$(_get_ovs_attr interface "${LLDP_PORT}" ofport)"
    LLDP_PATCH_PORTNUM="$(_get_ovs_attr interface "${LLDP_PATCH}" ofport)"

    MGMT_PHY_MACADDR="$(_get_ovs_attr interface "${MGMT_PHY_INT}" mac_in_use)"
    MGMT_PHY_MACADDR="${MGMT_PHY_MACADDR//\"/}"
    LLDP_PORT_MACADDR="$(_get_ovs_attr interface "${LLDP_PORT}" mac_in_use)"
    LLDP_PORT_MACADDR="${LLDP_PORT_MACADDR//\"/}"

    _print_dev_info "MGMT Bridge" "${MGMT_BRIDGE}" "${MGMT_PHY_PORTNUM}/${MGMT_PHY_INT}/${MGMT_PHY_MACADDR}" "${MGMT_PATCH_PORTNUM}/${MGMT_PATCH}"
    _print_dev_info "LLDP Bridge" "${LLDP_BRIDGE}" "${LLDP_PORT_PORTNUM}/${LLDP_PORT}/${LLDP_PORT_MACADDR}" "${LLDP_PATCH_PORTNUM}/${LLDP_PATCH}"

    # drop flows pri=0
    _add_ovs_flow "${MGMT_BRIDGE}" "priority=1,dl_dst=${LLDP_NB_MACADDR},dl_type=${LLDP_ETHER_TYPE},actions=drop"
    _add_ovs_flow "${LLDP_BRIDGE}" "priority=1,actions=drop"

    # phy->patch_to_br-lldp->lldp_port
    _add_ovs_flow "${MGMT_BRIDGE}" "priority=100,in_port=${MGMT_PHY_PORTNUM},dl_dst=${LLDP_NB_MACADDR},dl_type=${LLDP_ETHER_TYPE},actions=mod_dl_dst:${LLDP_PORT_MACADDR},output:${MGMT_PATCH_PORTNUM}"
    _add_ovs_flow "${LLDP_BRIDGE}" "priority=100,in_port=${LLDP_PATCH_PORTNUM},dl_dst=${LLDP_PORT_MACADDR},dl_type=${LLDP_ETHER_TYPE},actions=mod_dl_dst:${LLDP_NB_MACADDR},output:${LLDP_PORT_PORTNUM}"

    #lldp_port->patch_to_br-mgmt->phy
    _add_ovs_flow "${LLDP_BRIDGE}" "priority=100,in_port=${LLDP_PORT_PORTNUM},dl_dst=${LLDP_NB_MACADDR},dl_type=${LLDP_ETHER_TYPE},actions=mod_dl_dst:${MGMT_PHY_MACADDR},output:${LLDP_PATCH_PORTNUM}"
    _add_ovs_flow "${MGMT_BRIDGE}" "priority=100,in_port=${MGMT_PATCH_PORTNUM},dl_dst=${MGMT_PHY_MACADDR},dl_type=${LLDP_ETHER_TYPE},actions=mod_dl_dst:${LLDP_NB_MACADDR},output:${MGMT_PHY_PORTNUM}"

    _set_lldp "${MGMT_PHY_INT}" "adminStatus=rxtx"
    _set_lldp "${LLDP_PORT}" "adminStatus=rx"
    for TLV in "${LLDP_TLVS[@]}"; do
      _set_lldp_tlv ${LLDP_PORT} ${TLV}
    done

    PHY_LINK_STATE="$(_get_ovs_attr interface ${MGMT_PHY_INT} link_state)"
    [[ "${PHY_LINK_STATE}" == down ]] && \
      printf "\nNot Printing LLDP info for: ${MGMT_PHY_INT}. Link State is: ${PHY_LINK_STATE}\n\n" && \
      continue

    for x in {1..3} ; do
      printf "\n------------- LLDP LOCAL Info : ${MGMT_PHY_INT} ---------------\n\n"
      _get_lldp "${MGMT_PHY_INT}" || f="${f:-1}"
      sleep 2
      printf "\n------------- LLDP NEIGHBOR Info : ${LLDP_PORT} ---------------\n\n"
      _get_lldp "${LLDP_PORT}" 1 || f="${f:-1}"
      [[ ! -z "${f}" ]] && { unset f; systemctl restart lldpad && continue; }
      break
    done;
    printf "\n-------------------------------------------------------\n\n"

  done;
}

function _create_ovs_bridge() {
  [[ -z "${1}" ]] && \
    { printf "Cannot create OVS Bridge: missing arg\n"; return 1; };
  local BRIDGE="${1}"
  local BRIDGE_OPTS="${2}"
  ${OVS_VSCTL} --may-exist add-br ${BRIDGE} ${BRIDGE_OPTS}
}

function _create_ovs_port() {
  [[ -z "${1}" || -z "${2}" ]] && \
    { printf "Cannot create OVS Port: missing arg\n"; return 1; };
  local BRIDGE="${1}"
  local PORT="${2}"
  local PORT_OPTS="${3:-}"
  ${OVS_VSCTL} --may-exist add-port ${BRIDGE} ${PORT} ${PORT_OPTS}
}

function _set_link_up() {
  [[ -z "${1}" ]] && \
    { printf "Cannot set link state: missing port\n"; return 1; };
  local PORT="${1}"
  ip l set ${PORT} up
}

function _set_link_down() {
  [[ -z "${1}" ]] && \
    { printf "Cannot set link state: missing port\n"; return 1; };
  local PORT="${1}"
  ip l set ${PORT} down
}

function _get_mgmt_interfaces() {
  [[ -z "${1}" ]] && \
    { printf "Cannot get interfaces: missing bridge name"; return 1; };
  local BRIDGE="${1}"
  local DEVS
  for dev in $(${OVS_VSCTL} list-ifaces ${BRIDGE}); do
     dev_type="$(_get_ovs_attr interface "${dev}" type)"
     [[ "${dev_type}" == \"\" ]] && DEVS="${DEVS} ${dev}"
  done
  printf "%s" "${DEVS}"
}

function _set_ovs_attr() {
  [[ -z "${1}" || -z "${2}" || -z "${3}" ]] && \
    { printf "Cannot Update OVS Port: missing arg\n"; return 1; };
  local TABLE="${1}"
  local DEV="${2}"
  local DEV_ATTR="${3}"
  ${OVS_VSCTL} set ${TABLE} ${DEV} ${DEV_ATTR}
}

function _get_ovs_attr() {
  [[ -z "${1}" || -z "${2}" || -z "${3}" ]] && \
    { printf "Cannot Lookup OVS Port Number: missing arg\n"; return 1; };
  local TABLE="${1}"
  local DEV="${2}"
  local DEV_ATTR="${3}"
  ${OVS_VSCTL} get ${TABLE} ${DEV} ${DEV_ATTR}
}

function _add_ovs_flow() {
  [[ -z "${1}" || -z "${2}" ]] && \
    { printf "Cannot add OVS Flow: missing arg\n"; return 1; };
  local BRIDGE="${1}"
  local RULE="${2}"
  ${OVS_OFCTL} add-flow ${BRIDGE} ${RULE}
}

function _print_dev_info() {
  [[ -z "${1}" || -z "${2}" || -z "${3}" || -z "${4}" ]] && \
    { printf "Cannot print OVS Info: missing arg\n"; return 1; };

  local LINE_DESC="${1}"
  local BRIDGE="${2}"
  local DEV_INT="${3}"
  local DEV_PATCH="${4}"
  printf "%s Info:\n  - %s\n  - %s\n  - %s\n\n" "${LINE_DESC}" \
    "Bridge Name: ${BRIDGE}" \
    "Int (num/name): ${DEV_INT}" \
    "Patch (num/name): ${DEV_PATCH}"
}

function _set_lldp() {
  [[ -z "${1}" || -z "${2}" ]] && \
    { printf "Cannot set LLDP Info: missing arg\n"; return 1; };

  local DEV="${1}"
  local DEV_ATTR="${2}"
  ${LLDPTOOL} set-lldp -i ${DEV} ${DEV_ATTR} &> /dev/null
}

function _set_lldp_tlv() {
  [[ -z "${1}" || -z "${2}" ]] && \
    { printf "Cannot set LLDP TLV Info: missing arg\n"; return 1; };
  local DEV="${1}"
  local DEV_ATTR="${2}"
  ${LLDPTOOL} set-tlv -i ${DEV} -V ${DEV_ATTR} enableTx=yes &> /dev/null
}

function _get_lldp() {
  [[ -z "${1}" ]] && \
    { printf "Cannot get LLDP Info: missing arg\n"; return 1; };
  local DEV="${1}"
  local NEIGHBOR="${2}"
  [[ ! -z "${NEIGHBOR}" ]] && NEIGHBOR='-n'
  ${LLDPTOOL} get-tlv ${NEIGHBOR} -i ${DEV}
}


main "$@"

